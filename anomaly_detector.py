import pandas as pd
from adtk.data import validate_series
from adtk.visualization import plot
from adtk.detector import OutlierDetector
from sklearn.neighbors import LocalOutlierFactor
import time
import os

# Path to the log file generated by the physical process simulator
LOG_FILE = "/usr/src/app/logs/power_flow.log"

def monitor_and_detect():
    """
    Monitors the power flow log file and detects anomalies.
    """
    print("--- Anomaly Detection Agent Started ---")
    print(f"Waiting for log file at: {LOG_FILE}")

    # Ensure the log directory exists
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

    while not os.path.exists(LOG_FILE):
        time.sleep(2)

    print("Log file found. Starting monitoring...")

    while True:
        try:
            # Read the latest data from the log file
            # We'll use the 'loading_percent' of the power line for anomaly detection
            data = pd.read_csv(
                LOG_FILE,
                index_col="timestamp",
                parse_dates=True,
                names=["timestamp", "loading_percent"]
            )

            # The ADTK library requires a validated time series
            s = validate_series(data["loading_percent"])

            # --- Anomaly Detection using Local Outlier Factor ---
            # This model identifies outliers based on the local density of data points.
            # It's good at finding sudden, unexpected spikes or drops.
            outlier_detector = OutlierDetector(LocalOutlierFactor(contamination=0.05))
            anomalies = outlier_detector.fit_detect(s)

            if not anomalies.empty and anomalies.any():
                print("\n--- ANOMALY DETECTED! ---")
                print("Unusual power line loading detected at the following times:")
                print(anomalies[anomalies])
                # In a real system, this would trigger an alert.
            else:
                print(f"\n({pd.Timestamp.now()}) - System state normal. Monitoring...")


        except Exception as e:
            print(f"Waiting for data... ({e})")

        time.sleep(10) # Check for anomalies every 10 seconds

if __name__ == "__main__":
    monitor_and_detect()